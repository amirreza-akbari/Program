package com.example.healthcheckapp;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.widget.TextView;
import android.widget.Toast;
import androidx.activity.OnBackPressedCallback;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.cardview.widget.CardView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.example.healthcheckapp.utils.LocaleManager;
import com.example.healthcheckapp.utils.ThemeManager;
import com.google.android.material.button.MaterialButton;
import java.util.HashMap;
import java.util.Map;
import androidx.cardview.widget.CardView;
import android.graphics.Color;

public class QuestionsActivity extends AppCompatActivity {

    private TextView tvQuestionNumber, tvQuestion, tvTimer;
    private MaterialButton btnYes, btnNo;
    private int currentQuestion = 1; // شماره سوال فعلی
    private int totalScore = 0; // امتیاز کل
    private CountDownTimer timer; // تایمر شمارش معکوس
    private String[] answers = new String[10]; // آرایه برای ذخیره پاسخ‌ها
    private String name, surname, email; // اطلاعات کاربر (نام، نام خانوادگی، ایمیل)
    private String lastLanguage; // آخرین زبان انتخابی
    private String[] questions; // آرایه سوالات

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        applyThemeAndLocale(); // اعمال تم و زبان بر اساس تنظیمات
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_questions);

        if (getSupportActionBar() != null) {
            getSupportActionBar().hide(); // مخفی کردن نوار عملگر بالا
        }

        // تنظیم CardView برای نمایش سوالات
        CardView cardView = findViewById(R.id.questionCard);
        if (ThemeManager.isDarkMode(this)) {
            cardView.setCardBackgroundColor(Color.parseColor("#0f4b6f")); // رنگ پس‌زمینه حالت شب
        } else {
            cardView.setCardBackgroundColor(Color.parseColor("#FFFFFF")); // رنگ پس‌زمینه حالت روز
        }

        // دریافت اطلاعات کاربر که از اکتیویتی قبلی ارسال شده است
        Intent intent = getIntent();
        name = intent.getStringExtra("name");
        surname = intent.getStringExtra("surname");
        email = intent.getStringExtra("email");

        // راه‌اندازی ویوها
        tvQuestionNumber = findViewById(R.id.tvQuestionNumber);
        tvQuestion = findViewById(R.id.tvQuestion);
        tvTimer = findViewById(R.id.tvTimer);
        btnYes = findViewById(R.id.btnYes);
        btnNo = findViewById(R.id.btnNo);

        // تنظیم سوالات بر اساس زبان انتخابی
        setupQuestions();
        updateQuestion();

        // راه‌اندازی و شروع تایمر شمارش معکوس
        timer = new CountDownTimer(30000, 1000) {
            @Override
            public void onTick(long millisUntilFinished) {
                int seconds = (int) (millisUntilFinished / 1000);
                int minutes = seconds / 60;
                seconds = seconds % 60;
                tvTimer.setText(String.format("%02d:%02d", minutes, seconds));

                // تغییر رنگ متن تایمر به قرمز وقتی که کمتر از 20 ثانیه باقی مانده باشد
                if (millisUntilFinished <= 20000) {
                    tvTimer.setTextColor(getResources().getColor(R.color.red));
                }
            }

            @Override
            public void onFinish() {
                tvTimer.setText(getCurrentLanguage().equals("fa") ? "زمان تمام شد!" : "Time's up!");
                submitAnswers(); // ارسال پاسخ‌ها وقتی تایمر تمام می‌شود
            }
        };
        timer.start();

        // تنظیم اکشن‌های دکمه‌ها برای پاسخ "بله" و "خیر"
        btnYes.setOnClickListener(v -> {
            answers[currentQuestion - 1] = "yes"; // ذخیره پاسخ "بله"
            totalScore += 2; // اضافه کردن امتیاز برای پاسخ "بله"
            goToNextQuestion(); // رفتن به سوال بعدی
        });

        btnNo.setOnClickListener(v -> {
            answers[currentQuestion - 1] = "no"; // ذخیره پاسخ "خیر"
            goToNextQuestion(); // رفتن به سوال بعدی
        });

        // جلوگیری از برگشت به صفحه قبلی در حین آزمون
        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {
            @Override
            public void handleOnBackPressed() {
                new AlertDialog.Builder(QuestionsActivity.this)
                        .setTitle(getCurrentLanguage().equals("fa") ? "خطا" : "Warning")
                        .setMessage(getCurrentLanguage().equals("fa")
                                ? "شما تا پایان آزمون حق خروج ندارید!"
                                : "You cannot exit until the end of the test!")
                        .setCancelable(false)
                        .setIcon(R.drawable.logo)
                        .setPositiveButton(getCurrentLanguage().equals("fa") ? "باشه" : "OK", (dialog, which) -> {})
                        .show();
            }
        });
    }

    // اعمال تم و زبان بر اساس تنظیمات انتخابی
    private void applyThemeAndLocale() {
        if (ThemeManager.isDarkMode(this)) {
            setTheme(R.style.Theme_MyApp_Dark); // تنظیم تم تاریک
        } else {
            setTheme(R.style.Theme_MyApp_Light); // تنظیم تم روشن
        }

        String currentLang = LocaleManager.getLanguage(this); // دریافت زبان فعلی
        lastLanguage = currentLang;
        LocaleManager.setLocale(this, currentLang); // تنظیم زبان اپلیکیشن
    }

    // تنظیم سوالات بر اساس زبان فعلی
    private void setupQuestions() {
        String lang = getCurrentLanguage();
        if (lang.equals("fa")) {
            questions = new String[] {
                    "آیا شما تجربه استفاده از نرم‌افزار مدیریت پروژه دارید؟",
                    "آیا می‌توانید با نرم‌افزارهای اکسل و ورد کار کنید؟",
                    "آیا از سیستم عامل ویندوز استفاده کرده‌اید؟",
                    "آیا از نرم‌افزارهای گرافیکی مانند فتوشاپ استفاده کرده‌اید؟",
                    "آیا تجربه برنامه‌نویسی دارید؟",
                    "آیا از نرم‌افزارهای مدیریت دیتابیس مانند SQL استفاده کرده‌اید؟",
                    "آیا از برنامه‌های کاربردی موبایل مانند اینستاگرام یا تلگرام استفاده کرده‌اید؟",
                    "آیا با استفاده از نرم‌افزارهای تحلیلی داده مانند SPSS آشنا هستید؟",
                    "آیا از نرم‌افزارهای ویرایش ویدیو مانند پریمیر استفاده کرده‌اید؟",
                    "آیا با استفاده از نرم‌افزارهای امنیت سایبری مانند فایروال آشنا هستید؟"
            };
        } else {
            questions = new String[] {
                    "Do you have experience using project management software?",
                    "Can you work with Excel and Word software?",
                    "Have you used the Windows operating system?",
                    "Have you worked with graphic software like Photoshop?",
                    "Do you have programming experience?",
                    "Have you used database management software like SQL?",
                    "Do you use mobile apps like Instagram or Telegram?",
                    "Are you familiar with analytical software like SPSS?",
                    "Have you used video editing software like Premiere?",
                    "Are you familiar with cybersecurity software like Firewalls?"
            };
        }
    }

    // دریافت زبان فعلی
    private String getCurrentLanguage() {
        return LocaleManager.getLanguage(this);
    }

    // رفتن به سوال بعدی یا تمام کردن آزمون در صورت پاسخ‌دهی به تمام سوالات
    private void goToNextQuestion() {
        if (currentQuestion < questions.length) {
            currentQuestion++; // افزایش شماره سوال
            updateQuestion(); // به‌روزرسانی سوال
        } else {
            submitAnswers(); // ارسال پاسخ‌ها
        }
    }

    // به‌روزرسانی رابط کاربری با شماره و متن سوال جاری
    private void updateQuestion() {
        tvQuestionNumber.setText(getCurrentLanguage().equals("fa") ? "سوال: " + currentQuestion : "Question: " + currentQuestion);
        tvQuestion.setText(questions[currentQuestion - 1]);
    }

    // ارسال پاسخ‌ها به سرور بعد از اتمام آزمون
    private void submitAnswers() {
        if (timer != null) timer.cancel(); // متوقف کردن تایمر
        String url = "https://b.mrbackend.ir/save_score.php"; // آدرس سرور

        StringRequest stringRequest = new StringRequest(Request.Method.POST, url,
                response -> {
                    if (response.equals("success")) {
                        Toast.makeText(this,
                                getCurrentLanguage().equals("fa") ? "نمره با موفقیت ذخیره شد" : "Score saved successfully",
                                Toast.LENGTH_SHORT).show();
                        // هدایت به صفحه نتیجه پس از ارسال پاسخ‌ها
                        Intent intent = new Intent(QuestionsActivity.this, ResultActivity.class);
                        intent.putExtra("name", name);
                        intent.putExtra("surname", surname);
                        intent.putExtra("email", email);
                        intent.putExtra("totalScore", totalScore);
                        startActivity(intent);
                        finish();
                    } else {
                        Toast.makeText(this,
                                getCurrentLanguage().equals("fa") ? "خطا در ذخیره نمره" : "Error saving score",
                                Toast.LENGTH_SHORT).show();
                    }
                },
                error -> Toast.makeText(this,
                        getCurrentLanguage().equals("fa") ? "خطا در اتصال به سرور" : "Server connection error",
                        Toast.LENGTH_SHORT).show()) {
            @Override
            protected Map<String, String> getParams() {
                Map<String, String> params = new HashMap<>();
                params.put("name", name);
                params.put("surname", surname);
                params.put("email", email);
                params.put("score", String.valueOf(totalScore));
                return params;
            }
        };

        RequestQueue requestQueue = Volley.newRequestQueue(this);
        requestQueue.add(stringRequest);
    }

    @Override
    protected void onResume() {
        super.onResume();
        String currentLang = LocaleManager.getLanguage(this);
        if (!currentLang.equals(lastLanguage)) {
            applyThemeAndLocale(); // اعمال تم و زبان مجدد
            recreate(); // بازسازی اکتیویتی
        }
    }
}
